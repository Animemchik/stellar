#![doc(
    html_logo_url = "https://raw.githubusercontent.com/quantumatic/stellar/main/additional/icon/stellar.png",
    html_favicon_url = "https://raw.githubusercontent.com/quantumatic/stellar/main/additional/icon/stellar.png"
)]

use derive_more::Display;
use paste::paste;
use stellar_ast::{IdentifierAST, ModuleItemKind, Visibility};
use stellar_diagnostics::Diagnostics;
use stellar_filesystem::location::{Location, DUMMY_LOCATION};
use stellar_fx_hash::FxHashMap;
use stellar_interner::{IdentifierId, PathId};
use stellar_thir::ty::{Type, TypeConstructor};

macro_rules! define_symbol_struct {
    ($($name:ident),*) => {
        paste! {
            /// A symbol's unique Id.
            #[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]
            pub enum Symbol {
                $(
                    [<$name:camel>]([<$name:camel Id>]),
                )*
            }

            impl Symbol {
                $(
                    #[doc = "Returns `true` if the symbol is a [`Symbol::" [<$name:camel>] "`]."]
                    #[doc = ""]
                    #[doc = "_This function is automatically generated by a macro._"]
                    #[inline(always)]
                    #[must_use]
                    pub const fn [<is_ $name>](&self) -> bool {
                        matches!(self, Self::[<$name:camel>](_))
                    }

                    #[doc = "Returns [`" [<$name:camel Id>] "`] if the symbol is a [`Symbol::" [<$name:camel>] "`]."]
                    #[doc = ""]
                    #[doc = "_This function is automatically generated by a macro._"]
                    #[inline(always)]
                    #[must_use]
                    pub fn [<to_ $name _or_none>](self) -> Option<[<$name:camel Id>]> {
                        match self {
                            Self::[<$name:camel>](id) => Some(id),
                            _ => None
                        }
                    }

                    #[doc = "Returns [`" [<$name:camel Id>] "`] if the symbol is a [`Symbol::" [<$name:camel>] "`]."]
                    #[doc = "# Panics"]
                    #[doc = "Panics if the symbol is not [`Symbol::" [<$name:camel>] "`]."]
                    #[doc = ""]
                    #[doc = "_This function is automatically generated by a macro._"]
                    #[inline(always)]
                    #[must_use]
                    pub fn [<to_ $name>](self) -> [<$name:camel Id>] {
                        self.[<to_ $name _or_none>]().unwrap()
                    }
                )*
            }
        }
    };
}

define_symbol_struct! {
    module,
    enum,
    struct,
    function,
    interface,
    tuple_like_struct,
    type_alias,
    enum_item
}

impl Symbol {
    /// Returns the signature of the symbol.
    #[inline(always)]
    #[must_use]
    pub fn signature(self, db: &Database) -> SignatureId {
        match self {
            Self::Enum(enum_) => enum_.signature(db),
            Self::Struct(struct_) => struct_.signature(db),
            Self::Function(function) => function.signature(db),
            Self::Interface(interface) => interface.signature(db),
            Self::TupleLikeStruct(struct_) => struct_.signature(db),
            Self::TypeAlias(alias) => alias.signature(db),
            Self::EnumItem(_) | Self::Module(_) => unreachable!(),
        }
    }

    pub fn module(self, db: &Database) -> ModuleId {
        match self {
            Self::Enum(enum_) => enum_.signature(db).module(db),
            Self::Struct(struct_) => struct_.signature(db).module(db),
            Self::Function(function_) => function_.signature(db).module(db),
            Self::Module(module) => module,
            Self::Interface(interface) => interface.signature(db).module(db),
            Self::TupleLikeStruct(struct_) => struct_.signature(db).module(db),
            Self::TypeAlias(alias) => alias.signature(db).module(db),
            Self::EnumItem(item) => item.module(db),
        }
    }

    /// Returns the name of the symbol.
    #[inline(always)]
    #[must_use]
    pub fn name(self, db: &Database) -> IdentifierAST {
        match self {
            Self::Module(module) => IdentifierAST {
                location: DUMMY_LOCATION,
                id: db.module(module).name,
            },
            Self::Enum(enum_) => enum_.signature(db).name(db),
            Self::Struct(struct_) => struct_.signature(db).name(db),
            Self::Function(function) => function.signature(db).name(db),
            Self::Interface(interface) => interface.signature(db).name(db),
            Self::TupleLikeStruct(struct_) => struct_.signature(db).name(db),
            Self::TypeAlias(alias) => alias.signature(db).name(db),
            Self::EnumItem(item) => item.name(db),
        }
    }

    #[inline(always)]
    #[must_use]
    pub fn module_item_kind_or_none(self) -> Option<ModuleItemKind> {
        match self {
            Self::Enum(_) => Some(ModuleItemKind::Enum),
            Self::Struct(_) => Some(ModuleItemKind::Struct),
            Self::Function(_) => Some(ModuleItemKind::Function),
            Self::Interface(_) => Some(ModuleItemKind::Interface),
            Self::TupleLikeStruct(_) => Some(ModuleItemKind::TupleLikeStruct),
            Self::TypeAlias(_) => Some(ModuleItemKind::TypeAlias),
            Self::EnumItem(_) | Self::Module(_) => None,
        }
    }

    #[inline(always)]
    #[must_use]
    pub fn module_item_kind(self) -> ModuleItemKind {
        self.module_item_kind_or_none().unwrap()
    }
}

/// A data that Stellar compiler has about an enum.
#[derive(Debug)]
pub struct EnumData {
    pub signature: SignatureId,
    pub items: FxHashMap<IdentifierId, EnumItemId>,
    pub methods: FxHashMap<IdentifierId, FunctionId>,
}

impl EnumData {
    /// Creates a new enum data object in the database and returns its Id.
    #[inline(always)]
    #[must_use]
    pub fn alloc(db: &mut Database, signature: SignatureId) -> EnumId {
        db.add_enum(Self::new(signature))
    }

    /// Creates a new enum data object.
    #[inline(always)]
    #[must_use]
    pub fn new(signature: SignatureId) -> Self {
        Self {
            signature,
            items: FxHashMap::default(),
            methods: FxHashMap::default(),
        }
    }
}

/// A unique Id that maps to [`EnumData`].
#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]
pub struct EnumId(pub usize);

impl EnumId {
    /// Returns a list of predicates associated with the enum.
    #[inline(always)]
    #[must_use]
    pub fn signature(self, db: &Database) -> SignatureId {
        db.enum_(self).signature
    }

    /// Returns a list of items associated with the enum.
    #[inline(always)]
    #[must_use]
    pub fn items(self, db: &Database) -> &FxHashMap<IdentifierId, EnumItemId> {
        &db.enum_(self).items
    }

    /// Returns `true` if an item with a given name is contained in the enum definition.
    #[inline(always)]
    #[must_use]
    pub fn contains_item(self, db: &Database, name: IdentifierId) -> bool {
        db.enum_(self).items.contains_key(&name)
    }

    /// Returns an item with a given name.
    pub fn item(self, db: &Database, name: IdentifierId) -> Option<EnumItemId> {
        db.enum_(self).items.get(&name).copied()
    }
}

/// A data that Stellar compiler has about a struct.
#[derive(Debug)]
pub struct StructData {
    pub signature: SignatureId,
    pub fields: FxHashMap<IdentifierId, FieldId>,
    pub methods: FxHashMap<IdentifierId, FunctionId>,
}

impl StructData {
    /// Creates a new struct data object in the database and returns its Id.
    #[inline(always)]
    #[must_use]
    pub fn alloc(db: &mut Database, signature: SignatureId) -> StructId {
        db.add_struct(Self::new(signature))
    }

    /// Creates a new struct data object.
    #[inline(always)]
    #[must_use]
    pub fn new(signature: SignatureId) -> Self {
        Self {
            signature,
            fields: FxHashMap::default(),
            methods: FxHashMap::default(),
        }
    }
}

/// A unique Id that maps to [`StructData`].
#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]
pub struct StructId(pub usize);

impl StructId {
    /// Returns a list of predicates associated with the struct.
    #[inline(always)]
    #[must_use]
    pub fn signature(self, db: &Database) -> SignatureId {
        db.struct_(self).signature
    }

    /// Returns a list of fields associated with the struct.
    #[inline(always)]
    #[must_use]
    pub fn fields(self, db: &Database) -> &FxHashMap<IdentifierId, FieldId> {
        &db.struct_(self).fields
    }
}

/// A data that Stellar compiler has about a function.
#[derive(Debug)]
pub struct TupleLikeStructData {
    pub signature: SignatureId,
    pub fields: Vec<(Visibility, Type)>,
}

impl TupleLikeStructData {
    /// Creates a new tuple-like struct data object in the database and returns its Id.
    #[inline(always)]
    #[must_use]
    pub fn alloc(db: &mut Database, signature: SignatureId) -> TupleLikeStructId {
        db.add_tuple_like_struct(Self::new(signature))
    }

    /// Creates a new tuple-like struct data object.
    #[inline(always)]
    #[must_use]
    pub fn new(signature: SignatureId) -> Self {
        Self {
            signature,
            fields: Vec::new(),
        }
    }
}

/// A unique Id that maps to [`TupleLikeStructData`].
#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]
pub struct TupleLikeStructId(pub usize);

impl TupleLikeStructId {
    /// Returns the type signature of the struct.
    #[inline(always)]
    #[must_use]
    pub fn signature(self, db: &Database) -> SignatureId {
        db.tuple_like_struct(self).signature
    }
}

/// A data that Stellar compiler has about a field.
#[derive(Debug)]
pub struct FieldData {
    pub visibility: Visibility,
    pub name: IdentifierAST,
    pub ty: Type,
}

impl FieldData {
    /// Creates a new field data object in the database and returns its Id.
    #[inline(always)]
    #[must_use]
    pub fn alloc(
        db: &mut Database,
        visibility: Visibility,
        name: IdentifierAST,
        ty: Type,
    ) -> FieldId {
        db.add_field(Self::new(visibility, name, ty))
    }

    /// Creates a new field data object.
    #[inline(always)]
    #[must_use]
    pub fn new(visibility: Visibility, name: IdentifierAST, ty: Type) -> Self {
        Self {
            visibility,
            name,
            ty,
        }
    }
}

/// A unique Id that maps to [`FieldData`].
#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]
pub struct FieldId(pub usize);

/// A data that Stellar compiler has about a predicate.
#[derive(Debug)]
pub struct PredicateData {
    pub ty: Type,
    pub bounds: Vec<TypeConstructor>,
}

impl PredicateData {
    /// Creates a new predicate data object in the database and returns its Id.
    #[inline(always)]
    #[must_use]
    pub fn alloc(db: &mut Database, ty: Type, bounds: Vec<TypeConstructor>) -> PredicateId {
        db.add_predicate(Self::new(ty, bounds))
    }

    /// Creates a new predicate data object.
    #[inline(always)]
    #[must_use]
    pub fn new(ty: Type, bounds: Vec<TypeConstructor>) -> Self {
        Self { ty, bounds }
    }
}

/// A unique Id that maps to [`PredicateData`].
#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]
pub struct PredicateId(pub usize);

/// A data that Stellar compiler has about a generic parameter scope.
#[derive(Default, PartialEq, Clone, Debug)]
pub struct GenericParameterScopeData {
    /// A parent scope, for example:
    ///
    /// ```stellar
    /// interface Foo[T] { // self.parent = Scope { parent: None, parameters: [T] }
    ///     fun bar[M]();  // self = Scope { parent: ..., parameters: [M] }
    /// }
    /// ```
    pub parent_scope: Option<GenericParameterScopeId>,

    /// A map of generic parameters in the scope.
    pub parameters: FxHashMap<IdentifierId, GenericParameterId>,
}

impl GenericParameterScopeData {
    /// Creates a new generic parameter scope data object in the database and returns its Id.
    #[inline(always)]
    #[must_use]
    pub fn alloc(db: &mut Database) -> GenericParameterScopeId {
        db.add_generic_parameter_scope(Self::new(None))
    }

    /// Creates a new empty generic parameter scope.
    #[inline(always)]
    #[must_use]
    pub fn new(parent_scope: Option<GenericParameterScopeId>) -> Self {
        Self {
            parent_scope,
            parameters: FxHashMap::default(),
        }
    }
}

/// A unique Id that maps to [`GenericParameterScopeData`].
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct GenericParameterScopeId(pub usize);

impl GenericParameterScopeId {
    /// Returns the parent scope.
    pub fn parent_scope(self, db: &Database) -> Option<GenericParameterScopeId> {
        db.generic_parameter_scope(self).parent_scope
    }

    /// Returns the map of generic parameters in the scope.
    pub fn parameters(self, db: &Database) -> &FxHashMap<IdentifierId, GenericParameterId> {
        &db.generic_parameter_scope(self).parameters
    }

    /// Adds a generic parameter into the scope.
    #[inline(always)]
    pub fn add_generic_parameter(
        self,
        db: &mut Database,
        parameter_name: IdentifierId,
        parameter: GenericParameterId,
    ) {
        db.generic_parameter_scope_mut(self)
            .parameters
            .insert(parameter_name, parameter);
    }

    /// Resolves a data about generic parameter in the scope.
    ///
    /// **Note**: the method shouldn't be used to check if the parameter exists
    /// in the scope. Use the [`contains()`] method.
    ///
    /// [`contains()`]: GenericParameterScopeId::contains
    #[inline(always)]
    #[must_use]
    pub fn resolve(
        &self,
        db: &Database,
        parameter_name: IdentifierId,
    ) -> Option<GenericParameterId> {
        if let Some(parameter_id) = self.parameters(db).get(&parameter_name) {
            Some(*parameter_id)
        } else if let Some(parent_scope_id) = &self.parent_scope(db) {
            parent_scope_id.resolve(db, parameter_name)
        } else {
            None
        }
    }

    /// Checks if the generic parameter exists in the scope.
    #[inline(always)]
    #[must_use]
    pub fn contains(&self, db: &Database, parameter_name: IdentifierId) -> bool {
        self.parameters(db).contains_key(&parameter_name)
            || if let Some(parent_scope_id) = &self.parent_scope(db) {
                parent_scope_id.contains(db, parameter_name)
            } else {
                false
            }
    }
}

/// A data, that the Stellar compiler has about a generic parameter.
#[derive(Debug, Clone, PartialEq, Eq)]
pub struct GenericParameterData {
    /// Location of the name of the generic parameter.
    ///
    /// ```txt
    /// foo[T: ToString = String]
    ///     ^
    /// ```
    pub location: Location,

    /// Default value of the generic parameter.
    ///
    /// ```txt
    /// foo[T: ToString = String]
    ///                   ^^^^^^
    /// ```
    pub default_value: Option<Type>,
}

impl GenericParameterData {
    /// Creates a new generic parameter data object in the database and returns its Id.
    #[inline(always)]
    #[must_use]
    pub fn alloc(
        db: &mut Database,
        location: Location,
        default_value: Option<Type>,
    ) -> GenericParameterId {
        db.add_generic_parameter(Self::new(location, default_value))
    }

    /// Creates a new generic parameter data object.
    #[inline(always)]
    #[must_use]
    pub fn new(location: Location, default_value: Option<Type>) -> Self {
        Self {
            location,
            default_value,
        }
    }
}

/// A unique Id that maps to [`GenericParameterData`].
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct GenericParameterId(pub usize);

/// A data that Stellar compiler has about an enum item.
#[derive(Debug)]
pub struct EnumItemData {
    pub name: IdentifierAST,
    pub module: ModuleId,
}

impl EnumItemData {
    /// Creates a new enum item data object in the database and returns its Id.
    #[inline(always)]
    #[must_use]
    pub fn alloc(db: &mut Database, name: IdentifierAST, module: ModuleId) -> EnumItemId {
        db.add_enum_item(Self::new(name, module))
    }

    /// Creates a new enum item data object.
    #[inline(always)]
    #[must_use]
    pub fn new(name: IdentifierAST, module: ModuleId) -> Self {
        Self { name, module }
    }
}

/// A unique Id that maps to [`EnumItemData`].
#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]
pub struct EnumItemId(pub usize);

impl EnumItemId {
    /// Returns the name of the enum item.
    #[inline(always)]
    #[must_use]
    pub fn name(self, db: &Database) -> IdentifierAST {
        db.enum_item(self).name
    }

    #[inline(always)]
    #[must_use]
    pub fn module(self, db: &Database) -> ModuleId {
        db.enum_item(self).module
    }
}

/// A data that Stellar compiler has about a particular type signature.
#[derive(Debug)]
pub struct SignatureData {
    pub visibility: Visibility,
    pub name: IdentifierAST,
    pub module: ModuleId,
    pub generic_parameter_scope: GenericParameterScopeId,
    pub predicates: Vec<PredicateId>,
    pub implements: Vec<TypeConstructor>,
    pub is_analyzed: bool,
}

impl SignatureData {
    /// Creates a new signature data object in the database and returns its Id.
    #[inline(always)]
    #[must_use]
    pub fn alloc(
        db: &mut Database,
        visibility: Visibility,
        name: IdentifierAST,
        module: ModuleId,
    ) -> SignatureId {
        let generic_parameter_scope = GenericParameterScopeData::alloc(db);

        db.add_signature(Self::new(visibility, name, generic_parameter_scope, module))
    }

    /// Creates a new signature data object.
    #[inline(always)]
    #[must_use]
    pub fn new(
        visibility: Visibility,
        name: IdentifierAST,
        generic_parameter_scope: GenericParameterScopeId,
        module: ModuleId,
    ) -> Self {
        Self {
            visibility,
            name,
            module,
            generic_parameter_scope,
            predicates: Vec::new(),
            implements: Vec::new(),
            is_analyzed: false,
        }
    }
}

/// A unique Id that maps to [`SignatureData`].
#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]
pub struct SignatureId(pub usize);

impl SignatureId {
    /// Returns the name.
    #[inline(always)]
    #[must_use]
    pub fn name(self, db: &Database) -> IdentifierAST {
        db.signature(self).name
    }

    /// Returns the visibility.
    #[inline(always)]
    #[must_use]
    pub fn visibility(self, db: &Database) -> Visibility {
        db.signature(self).visibility
    }

    /// Returns the module.
    #[inline(always)]
    #[must_use]
    pub fn module(self, db: &Database) -> ModuleId {
        db.signature(self).module
    }

    #[inline(always)]
    pub fn set_analyzed(self, db: &mut Database) {
        db.signature_mut(self).is_analyzed = true;
    }

    #[inline(always)]
    #[must_use]
    pub fn is_analyzed(self, db: &Database) -> bool {
        db.signature(self).is_analyzed
    }

    #[inline(always)]
    pub fn add_predicate(self, db: &mut Database, predicate: PredicateId) {
        db.signature_mut(self).predicates.push(predicate);
    }

    #[inline(always)]
    pub fn add_implemented_interface(self, db: &mut Database, interface: TypeConstructor) {
        db.signature_mut(self).implements.push(interface);
    }

    #[inline(always)]
    #[must_use]
    pub fn generic_parameter_scope(self, db: &Database) -> GenericParameterScopeId {
        db.signature(self).generic_parameter_scope
    }

    #[inline(always)]
    pub fn set_generic_parameter_scope(
        self,
        db: &mut Database,
        generic_parameter_scope: GenericParameterScopeId,
    ) {
        db.signature_mut(self).generic_parameter_scope = generic_parameter_scope;
    }
}

/// A data that Stellar compiler has about a function.
#[derive(Debug)]
pub struct FunctionData {
    pub signature: SignatureId,
}

impl FunctionData {
    /// Creates a new function data object in the database and returns its Id.
    #[inline(always)]
    #[must_use]
    pub fn alloc(db: &mut Database, signature: SignatureId) -> FunctionId {
        db.add_function(Self::new(signature))
    }

    /// Creates a new function data object.
    #[inline(always)]
    #[must_use]
    pub fn new(signature: SignatureId) -> Self {
        Self { signature }
    }
}

/// A unique Id that maps to [`FunctionData`].
#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]
pub struct FunctionId(pub usize);

impl FunctionId {
    /// Returns the function signature.
    #[inline(always)]
    #[must_use]
    pub fn signature(self, db: &Database) -> SignatureId {
        db.function(self).signature
    }
}

/// A data that Stellar compiler has about an interface.
#[derive(Debug)]
pub struct InterfaceData {
    pub signature: SignatureId,
    pub methods: FxHashMap<IdentifierId, FunctionId>,
}

impl InterfaceData {
    /// Creates a new interface data object in the database and returns its Id.
    #[inline(always)]
    #[must_use]
    pub fn alloc(db: &mut Database, signature: SignatureId) -> InterfaceId {
        db.add_interface(Self::new(signature))
    }

    /// Creates a new interface data object.
    #[inline(always)]
    #[must_use]
    pub fn new(signature: SignatureId) -> Self {
        Self {
            signature,
            methods: FxHashMap::default(),
        }
    }
}

/// A unique Id that maps to [`InterfaceData`].
#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]
pub struct InterfaceId(pub usize);

impl InterfaceId {
    /// Returns the type signature of the interface.
    #[inline(always)]
    #[must_use]
    pub fn signature(self, db: &Database) -> SignatureId {
        db.interface(self).signature
    }
}

/// A data that Stellar compiler has about a module.
#[derive(Debug)]
pub struct TypeAliasData {
    pub signature: SignatureId,
    pub ty: Type,
}

impl TypeAliasData {
    /// Creates a new type alias data object in the database and returns its Id.
    #[inline(always)]
    #[must_use]
    pub fn alloc(db: &mut Database, signature: SignatureId) -> TypeAliasId {
        db.add_type_alias(Self::new(signature))
    }

    /// Creates a new type alias data object.
    #[inline(always)]
    #[must_use]
    pub fn new(signature: SignatureId) -> Self {
        Self {
            signature,
            ty: Type::Unknown,
        }
    }
}

/// A unique Id that maps to [`TypeAliasData`].
#[derive(Debug, PartialEq, Eq, Clone, Copy, Hash)]
pub struct TypeAliasId(pub usize);

impl TypeAliasId {
    /// Returns the signature of the type alias.
    #[inline(always)]
    #[must_use]
    pub fn signature(self, db: &Database) -> SignatureId {
        db.type_alias(self).signature
    }

    #[inline(always)]
    #[must_use]
    pub fn ty(self, db: &Database) -> &Type {
        &db.type_alias(self).ty
    }

    #[inline(always)]
    #[must_use]
    pub fn ty_mut(self, db: &mut Database) -> &mut Type {
        &mut db.type_alias_mut(self).ty
    }
}

/// A data that Stellar compiler has about a module.
#[derive(Debug)]
pub struct ModuleData {
    pub name: IdentifierId,
    pub filepath: PathId,
    pub module_item_symbols: FxHashMap<IdentifierId, Symbol>,
    pub submodules: FxHashMap<IdentifierId, ModuleId>,
    pub resolved_imports: FxHashMap<IdentifierId, Symbol>,
}

impl ModuleData {
    /// Creates a new module data object in the database and returns its Id.
    #[inline(always)]
    #[must_use]
    pub fn alloc(db: &mut Database, name: IdentifierId, filepath: PathId) -> ModuleId {
        db.add_module(Self::new(name, filepath))
    }

    /// Creates a new module data object.
    #[inline(always)]
    #[must_use]
    pub fn new(name: IdentifierId, filepath: PathId) -> Self {
        Self {
            name,
            filepath,
            submodules: FxHashMap::default(),
            resolved_imports: FxHashMap::default(),
            module_item_symbols: FxHashMap::default(),
        }
    }
}

/// A unique Id that maps to [`ModuleData`].
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Display)]
pub struct ModuleId(pub usize);

impl ModuleId {
    /// Returns module's file path Id.
    #[inline(always)]
    #[must_use]
    pub fn filepath(self, db: &Database) -> PathId {
        db.module(self).filepath
    }

    /// Returns module's name.
    #[inline(always)]
    #[must_use]
    pub fn name(self, db: &Database) -> IdentifierId {
        db.module(self).name
    }

    /// Returns an immutable reference to module item symbols.
    #[inline(always)]
    #[must_use]
    pub fn module_item_symbols(self, db: &Database) -> &FxHashMap<IdentifierId, Symbol> {
        &db.module(self).module_item_symbols
    }

    /// Returns a mutable reference to module item symbols.
    #[inline(always)]
    #[must_use]
    pub fn module_item_symbols_mut(
        self,
        db: &mut Database,
    ) -> &mut FxHashMap<IdentifierId, Symbol> {
        &mut db.module_mut(self).module_item_symbols
    }

    /// Returns an immutable reference to submodules.
    #[inline(always)]
    #[must_use]
    pub fn submodules(self, db: &Database) -> &FxHashMap<IdentifierId, ModuleId> {
        &db.module(self).submodules
    }

    /// Returns a mutable reference to submodules.
    #[inline(always)]
    #[must_use]
    pub fn submodules_mut(self, db: &mut Database) -> &mut FxHashMap<IdentifierId, ModuleId> {
        &mut db.module_mut(self).submodules
    }

    /// Resolves a symbol related to only module item in the module.
    ///
    /// If you want to additionally resolve submodules, use [`ModuleId::symbol()`].
    #[inline(always)]
    pub fn module_item_symbol_or_none(
        self,
        db: &Database,
        item_name: IdentifierId,
    ) -> Option<Symbol> {
        self.module_item_symbols(db).get(&item_name).copied()
    }

    /// Resolves a symbol in the module.
    #[inline(always)]
    pub fn symbol_or_none(self, db: &Database, name: IdentifierId) -> Option<Symbol> {
        self.module_item_symbol_or_none(db, name)
            .or(self.submodule(db, name).map(Symbol::Module))
    }

    /// Resolves a symbol in the module.
    ///
    /// # Panics
    /// Panics if the symbol cannot be resolved.
    #[inline(always)]
    #[must_use]
    pub fn symbol(self, db: &Database, name: IdentifierId) -> Symbol {
        self.symbol_or_none(db, name).unwrap()
    }

    /// Resolves a symbol in the module.
    ///
    /// # Panics
    /// Panics if the symbol cannot be resolved.
    #[inline(always)]
    #[must_use]
    pub fn module_item_symbol(self, db: &Database, name: IdentifierId) -> Symbol {
        self.module_item_symbol_or_none(db, name).unwrap()
    }

    /// Adds a module item information to the module.
    #[inline(always)]
    pub fn add_module_item(self, db: &mut Database, name: IdentifierId, symbol: Symbol) {
        self.module_item_symbols_mut(db).insert(name, symbol);
    }

    /// Checks if a symbol is contained in the module.
    #[inline(always)]
    #[must_use]
    pub fn contains_module_item_symbol(self, db: &Database, item_name: IdentifierId) -> bool {
        self.module_item_symbols(db).contains_key(&item_name)
    }

    /// Returns the ID of the submodule of the module by its name.
    #[inline(always)]
    pub fn submodule(self, db: &Database, name: IdentifierId) -> Option<ModuleId> {
        self.submodules(db).get(&name).copied()
    }

    /// Adds a submodule to the module.
    #[inline(always)]
    pub fn add_submodule(self, db: &mut Database, module: ModuleId) {
        let name = module.name(db);

        self.submodules_mut(db).insert(name, module);
    }

    /// Checks if a submodule with a given name is contained in the module.
    #[inline(always)]
    #[must_use]
    pub fn contains_submodule_with_name(self, db: &Database, name: IdentifierId) -> bool {
        self.submodules(db).contains_key(&name)
    }

    /// Checks if a submodule with a given Id is contained in the module.
    #[inline(always)]
    #[must_use]
    pub fn contains_submodule_with_id(self, db: &Database, id: ModuleId) -> bool {
        self.submodules(db)
            .values()
            .any(|&submodule| submodule == id)
    }

    /// Returns an immutable reference to imports.
    #[inline(always)]
    #[must_use]
    pub fn resolved_imports(self, db: &Database) -> &FxHashMap<IdentifierId, Symbol> {
        &db.module(self).resolved_imports
    }

    /// Returns a mutable reference to imports.
    #[inline(always)]
    #[must_use]
    pub fn resolved_imports_mut(self, db: &mut Database) -> &mut FxHashMap<IdentifierId, Symbol> {
        &mut db.module_mut(self).resolved_imports
    }

    /// Adds a resolved import to the module.
    #[inline(always)]
    pub fn add_resolved_import(self, db: &mut Database, name: IdentifierId, symbol: Symbol) {
        self.resolved_imports_mut(db).insert(name, symbol);
    }
}

/// Storage for Stellar compiler entities.
#[derive(Default, Debug)]
pub struct Database {
    packages: FxHashMap<IdentifierId, ModuleId>,
    modules: Vec<ModuleData>,
    enums: Vec<EnumData>,
    enum_items: Vec<EnumItemData>,
    predicates: Vec<PredicateData>,
    structs: Vec<StructData>,
    tuple_like_structs: Vec<TupleLikeStructData>,
    fields: Vec<FieldData>,
    functions: Vec<FunctionData>,
    interfaces: Vec<InterfaceData>,
    type_aliases: Vec<TypeAliasData>,
    generic_parameter_scopes: Vec<GenericParameterScopeData>,
    generic_parameters: Vec<GenericParameterData>,
    signatures: Vec<SignatureData>,
}

macro_rules! __db_first_access_method {
    (
        {
            name_singular: $what:ident,
            name_plural: $whats:ident,
            id_ty: $id_ty:ty,
            data_ty: $data_ty:ty
        }
    ) => {
            paste! {
                #[doc = "Returns an immutable reference to [`" $data_ty "`] by its Id ([`" $id_ty "`])."]
                #[doc = "# Panics"]
                #[doc = "Panics if an object with the given Id is not present in the database storage."]
                #[doc = ""]
                #[doc = "_This function is automatically generated using a macro!_"]
                #[inline(always)]
                #[must_use]
                pub fn $what(&self, id: $id_ty) -> &$data_ty {
                    &self.$whats[id.0]
                }
            }
    };
    (
        {
            reserved_name,
            name_singular: $what:ident,
            name_plural: $whats:ident,
            id_ty: $id_ty:ty,
            data_ty: $data_ty:ty
        }
    ) => {
            paste! {
                #[doc = "Returns an immutable reference to [`" $data_ty "`] by its Id ([`" $id_ty "`])."]
                #[doc = "# Panics"]
                #[doc = "Panics if an object with the given Id is not present in the database storage."]
                #[doc = ""]
                #[doc = "_This function is automatically generated using a macro!_"]
                #[inline(always)]
                #[must_use]
                pub fn [<$what _>](&self, id: $id_ty) -> &$data_ty {
                    &self.$whats[id.0]
                }
            }
    };
}

macro_rules! __db_rest_of_access_methods {
    (
        {
            name_singular: $what:ident,
            name_plural: $whats:ident,
            id_ty: $id_ty:ty,
            data_ty: $data_ty:ty
        }
    ) => {
        paste! {
            #[doc = "Returns a mutable reference to [`" $data_ty "`] by its Id ([`" $id_ty "`])."]
            #[doc = "# Panics"]
            #[doc = "Panics if an object with the given Id is not present in the database storage."]
            #[doc = ""]
            #[doc = "_This function is automatically generated using a macro!_"]
            #[inline(always)]
            #[must_use]
            pub fn [<$what _mut>](&mut self, id: $id_ty) -> &mut $data_ty {
                &mut self.$whats[id.0]
            }

            #[doc = "Returns an immutable reference to [`" $data_ty "`] by its Id ([`" $id_ty "`])."]
            #[doc = ""]
            #[doc = "_This function is automatically generated using a macro!_"]
            #[inline(always)]
            #[must_use]
            pub fn [<$what _or_none>](&self, id: $id_ty) -> Option<&$data_ty> {
                self.$whats.get(id.0)
            }

            #[doc = "Returns a mutable reference to [`" $data_ty "`] by its Id ([`" $id_ty "`])."]
            #[doc = ""]
            #[doc = "_This function is automatically generated using a macro!_"]
            #[inline(always)]
            #[must_use]
            pub fn [<$what _mut_or_none>](&mut self, id: $id_ty) -> Option<&mut $data_ty> {
                self.$whats.get_mut(id.0)
            }

            #[doc = "Returns whether a [`" $data_ty "`] with a given Id ([`" $id_ty "`]) is present in the database storage."]
            #[doc = ""]
            #[doc = "_This function is automatically generated using a macro!_"]
            #[inline(always)]
            #[must_use]
            pub fn [<contains_ $what>](&self, id: $id_ty) -> bool {
                id.0 < self.$whats.len()
            }

            #[doc = "Adds an object of type [`" $data_ty "`] to the database storage and returns its Id ([`" $id_ty "`])."]
            #[doc = ""]
            #[doc = "_This function is automatically generated using a macro!_"]
            #[inline(always)]
            #[must_use]
            pub fn [<add_ $what>](&mut self, [<$what _>]: $data_ty) -> $id_ty {
                self.$whats.push([<$what _>]);

                $id_ty(self.$whats.len() - 1)
            }
        }
    };
    (
        {
            reserved_name,
            name_singular: $what:ident,
            name_plural: $whats:ident,
            id_ty: $id_ty:ty,
            data_ty: $data_ty:ty
        }
    ) => {
        __db_rest_of_access_methods! {
            {
                name_singular: $what,
                name_plural: $whats,
                id_ty: $id_ty,
                data_ty: $data_ty
            }
        }
    }
}

macro_rules! __db_data_access_methods {
    ($($tt:tt),*) => {
        $(
            __db_first_access_method! { $tt }
            __db_rest_of_access_methods! { $tt }
        )*
    };
}

impl Database {
    /// Creates a new empty database.
    #[inline(always)]
    #[must_use]
    pub fn new() -> Self {
        Self::default()
    }

    // Returns a package's root module Id data by package Id.
    #[inline(always)]
    pub fn package_root_module(&self, package_name: IdentifierId) -> Option<ModuleId> {
        self.packages.get(&package_name).copied()
    }

    /// Returns a package's root module Id data by package Id.
    /// # Panics
    /// Panics if the package information is not present in the database storage.
    #[inline(always)]
    #[must_use]
    pub fn package_root_module_or_panic(&self, package_name: IdentifierId) -> ModuleId {
        *self.packages.get(&package_name).unwrap()
    }

    /// Returns wether a package with a given name is present in the database storage.
    #[inline(always)]
    #[must_use]
    pub fn contains_package(&self, package_name: IdentifierId) -> bool {
        self.packages.contains_key(&package_name)
    }

    /// Adds a package to the database storage.
    #[inline(always)]
    pub fn add_package(&mut self, root_module: ModuleId) {
        let name = root_module.name(self);
        self.packages.insert(name, root_module);
    }

    __db_data_access_methods! {
        {
            name_singular: module,
            name_plural: modules,
            id_ty: ModuleId,
            data_ty: ModuleData
        },
        {
            reserved_name,
            name_singular: enum,
            name_plural: enums,
            id_ty: EnumId,
            data_ty: EnumData
        },
        {
            name_singular: enum_item,
            name_plural: enum_items,
            id_ty: EnumItemId,
            data_ty: EnumItemData
        },
        {
            name_singular: predicate,
            name_plural: predicates,
            id_ty: PredicateId,
            data_ty: PredicateData
        },
        {
            reserved_name,
            name_singular: struct,
            name_plural: structs,
            id_ty: StructId,
            data_ty: StructData
        },
        {
            name_singular: tuple_like_struct,
            name_plural: tuple_like_structs,
            id_ty: TupleLikeStructId,
            data_ty: TupleLikeStructData
        },
        {
            name_singular: field,
            name_plural: fields,
            id_ty: FieldId,
            data_ty: FieldData
        },
        {
            name_singular: function,
            name_plural: functions,
            id_ty: FunctionId,
            data_ty: FunctionData
        },
        {
            name_singular: type_alias,
            name_plural: type_aliases,
            id_ty: TypeAliasId,
            data_ty: TypeAliasData
        },
        {
            name_singular: interface,
            name_plural: interfaces,
            id_ty: InterfaceId,
            data_ty: InterfaceData
        },
        {
            name_singular: generic_parameter_scope,
            name_plural: generic_parameter_scopes,
            id_ty: GenericParameterScopeId,
            data_ty: GenericParameterScopeData
        },
        {
            name_singular: generic_parameter,
            name_plural: generic_parameters,
            id_ty: GenericParameterId,
            data_ty: GenericParameterData
        },
        {
            name_singular: signature,
            name_plural: signatures,
            id_ty: SignatureId,
            data_ty: SignatureData
        }
    }
}

/// Contains database and diagnostics.
#[derive(Default)]
pub struct State {
    db: Database,
    diagnostics: Diagnostics,
    config: Config,
}

#[derive(Default)]
pub struct Config {}

impl Config {
    #[inline(always)]
    #[must_use]
    pub fn new() -> Self {
        Self::default()
    }
}

impl State {
    /// Creates a new empty state.
    #[inline(always)]
    #[must_use]
    pub fn new() -> Self {
        Self::default()
    }

    /// Builds a new state with given configuration.
    #[inline(always)]
    #[must_use]
    pub fn with_config(mut self, config: Config) -> Self {
        self.config = config;
        self
    }

    /// Returns a reference to config.
    #[inline(always)]
    #[must_use]
    pub const fn config(&self) -> &Config {
        &self.config
    }

    /// Returns an immutable reference to a database object.
    #[inline(always)]
    #[must_use]
    pub const fn db(&self) -> &Database {
        &self.db
    }

    /// Returns a mutable reference to a database object.
    #[inline(always)]
    #[must_use]
    pub fn db_mut(&mut self) -> &mut Database {
        &mut self.db
    }

    /// Gives an ownership over database object inside the state.
    #[inline(always)]
    #[must_use]
    pub fn into_db(self) -> Database {
        self.db
    }

    /// Returns an immutable reference to diagnostics.
    #[inline(always)]
    #[must_use]
    pub const fn diagnostics(&self) -> &Diagnostics {
        &self.diagnostics
    }

    /// Returns a mutable reference to diagnostics.
    #[inline(always)]
    #[must_use]
    pub fn diagnostics_mut(&mut self) -> &mut Diagnostics {
        &mut self.diagnostics
    }

    /// Gives an ownership over diagnostics object inside the state.
    #[inline(always)]
    #[must_use]
    pub fn into_diagnostics(self) -> Diagnostics {
        self.diagnostics
    }
}
